name: Weekly Contributor Leaderboard

on:
  schedule:
    - cron: '0 0 * * 1'  # Every Monday at midnight UTC
  workflow_dispatch:  # Allows manual triggering

jobs:
  update-leaderboard:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch contributor stats and update leaderboard
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x  # Enable debug mode
          
          echo "Fetching contributor stats..."
          
          # Set date range for the past week
          since_date=$(date -d 'last Monday' --utc +%Y-%m-%dT%H:%M:%SZ)
          until_date=$(date --utc +%Y-%m-%dT%H:%M:%SZ)
          
          echo "Date range: $since_date to $until_date"
          
          # Initialize leaderboard markdown file
          echo "# Weekly Contributor Leaderboard" > leaderboard.md
          echo "" >> leaderboard.md
          echo "Last updated: $(date --utc)" >> leaderboard.md
          echo "Period: Past week" >> leaderboard.md
          echo "" >> leaderboard.md
          echo "| Contributor | Commits | Issues | Pull Requests | Discussions | Reviews | Badge |" >> leaderboard.md
          echo "|-------------|---------|---------|---------------|-------------|---------|-------|" >> leaderboard.md
          
          # Create temporary directory for data
          mkdir -p /tmp/leaderboard
          
          # Fetch commits
          echo "Fetching commits..."
          curl -s \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/commits?since=$since_date&until=$until_date" > /tmp/leaderboard/commits.json
          
          echo "Fetching issues..."
          curl -s \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues?state=all&since=$since_date" > /tmp/leaderboard/issues.json
          
          echo "Fetching pull requests..."
          curl -s \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?state=all&since=$since_date" > /tmp/leaderboard/prs.json
          
          # Debug: Print API responses
          echo "Commits response:"
          cat /tmp/leaderboard/commits.json | jq '.'
          
          echo "Issues response:"
          cat /tmp/leaderboard/issues.json | jq '.'
          
          echo "PRs response:"
          cat /tmp/leaderboard/prs.json | jq '.'
          
          # Process commits
          echo "Processing commits..."
          if [ -s "/tmp/leaderboard/commits.json" ]; then
            jq -r '.[] | select(.author != null and .author.login != "github-actions[bot]" and .author.login != "actions-user") | .author.login' /tmp/leaderboard/commits.json | \
              sort | uniq -c | while read count login; do
                if [ ! -z "$login" ]; then
                  # Fetch user avatar
                  avatar_url=$(curl -s \
                    -H "Authorization: token $GITHUB_TOKEN" \
                    -H "Accept: application/vnd.github.v3+json" \
                    "https://api.github.com/users/$login" | jq -r '.avatar_url')
                  
                  # Determine badge
                  badge="üå± New Contributor"
                  if [ "$count" -gt 10 ]; then
                    badge="üèÜ Top Contributor"
                  elif [ "$count" -gt 5 ]; then
                    badge="üí™ Consistent Contributor"
                  fi
                  
                  echo "Adding contributor: $login with $count commits"
                  echo "| <img src=\"$avatar_url\" width=\"30\" style=\"border-radius: 50%\"> [@$login](https://github.com/$login) | $count | 0 | 0 | 0 | 0 | $badge |" >> leaderboard.md
                fi
              done
          else
            echo "No commits found in the response"
          fi
          
          # Process issues
          echo "Processing issues..."
          if [ -s "/tmp/leaderboard/issues.json" ]; then
            jq -r '.[] | select(.user != null and .user.login != "github-actions[bot]" and .user.login != "actions-user") | .user.login' /tmp/leaderboard/issues.json | \
              sort | uniq -c | while read count login; do
                if [ ! -z "$login" ]; then
                  if grep -q "@$login" leaderboard.md; then
                    # Update existing entry
                    sed -i "s/| $count | 0 | 0 | 0 |/| $count | $count | 0 | 0 |/" leaderboard.md
                  else
                    # Fetch user avatar
                    avatar_url=$(curl -s \
                      -H "Authorization: token $GITHUB_TOKEN" \
                      -H "Accept: application/vnd.github.v3+json" \
                      "https://api.github.com/users/$login" | jq -r '.avatar_url')
                    
                    # Determine badge
                    badge="üéØ Issue Master"
                    echo "| <img src=\"$avatar_url\" width=\"30\" style=\"border-radius: 50%\"> [@$login](https://github.com/$login) | 0 | $count | 0 | 0 | 0 | $badge |" >> leaderboard.md
                  fi
                fi
              done
          else
            echo "No issues found in the response"
          fi
          
          # If no contributors were found, add a message
          if [ ! -s leaderboard.md ]; then
            echo "| No activity found in the past week | - | - | - | - | - | - |" >> leaderboard.md
          fi
          
          # Add badge explanation
          echo "" >> leaderboard.md
          echo "## Badge Levels" >> leaderboard.md
          echo "" >> leaderboard.md
          echo "- üèÜ **Top Contributor**: More than 10 commits" >> leaderboard.md
          echo "- üí™ **Consistent Contributor**: More than 5 commits" >> leaderboard.md
          echo "- üéØ **Issue Master**: More than 5 issues" >> leaderboard.md
          echo "- üå± **New Contributor**: First contribution" >> leaderboard.md
          
          # Clean up
          rm -rf /tmp/leaderboard
          
          # Debug: Show final leaderboard content
          echo "Final leaderboard content:"
          cat leaderboard.md
          
          # Commit and push changes if there are updates
          git config --global user.name "GitHub Actions"
          git config --global user.email "action@github.com"
          git diff --exit-code leaderboard.md || (git add leaderboard.md && git commit -m "üîÅ Weekly leaderboard update with badges" && git push)
