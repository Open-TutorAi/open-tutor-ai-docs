name: Weekly Contributor Leaderboard

on:
  schedule:
    - cron: '0 0 * * 1'  # Every Monday at midnight UTC
  workflow_dispatch:  # Allows manual triggering

jobs:
  update-leaderboard:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch contributor stats and update leaderboard
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get a list of contributors and their commits
          echo "Fetching contributor stats..."
          
          # Set date range for the past week (change if necessary)
          since_date=$(date -d 'last Monday' --utc +%Y-%m-%dT%H:%M:%SZ)
          until_date=$(date --utc +%Y-%m-%dT%H:%M:%SZ)
          
          # Initialize leaderboard markdown file
          echo "# Weekly Contributor Leaderboard" > leaderboard.md
          echo "" >> leaderboard.md
          echo "| Contributor | Commits | Pull Requests | Issues | Reviews | Badge |" >> leaderboard.md
          echo "|-------------|---------|----------------|--------|---------|-------|" >> leaderboard.md
          
          # Fetch commits for the past week
          contributors_commits=$(curl -s \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/commits?since=$since_date&until=$until_date")

          # Fetch issues created for the past week
          contributors_issues=$(curl -s \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues?state=all&since=$since_date&until=$until_date")

          # Fetch pull requests merged for the past week
          contributors_prs=$(curl -s \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&since=$since_date&until=$until_date")

          # Fetch reviews given for the past week
          contributors_reviews=$(curl -s \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/reviews?since=$since_date&until=$until_date")

          # Initialize contributor data
          declare -A commits
          declare -A issues
          declare -A prs
          declare -A reviews

          # Extract commit data
          echo "$contributors_commits" | jq -r '.[] | "\(.author.login) | 1"' | \
            awk -F '|' '{ a[$1]+=$2 } END { for (i in a) print i, a[i] }' | \
            sort -k2 -nr | \
            while read contributor commit_count; do
              commits[$contributor]=$commit_count
            done

          # Extract issues data
          echo "$contributors_issues" | jq -r '.[] | "\(.user.login) | 1"' | \
            awk -F '|' '{ a[$1]+=$2 } END { for (i in a) print i, a[i] }' | \
            sort -k2 -nr | \
            while read contributor issue_count; do
              issues[$contributor]=$issue_count
            done

          # Extract pull request data
          echo "$contributors_prs" | jq -r '.[] | "\(.user.login) | 1"' | \
            awk -F '|' '{ a[$1]+=$2 } END { for (i in a) print i, a[i] }' | \
            sort -k2 -nr | \
            while read contributor pr_count; do
              prs[$contributor]=$pr_count
            done

          # Extract review data
          echo "$contributors_reviews" | jq -r '.[] | "\(.user.login) | 1"' | \
            awk -F '|' '{ a[$1]+=$2 } END { for (i in a) print i, a[i] }' | \
            sort -k2 -nr | \
            while read contributor review_count; do
              reviews[$contributor]=$review_count
            done

          # Now loop through all contributors to compile the leaderboard
          for contributor in "${!commits[@]}"; do
            # Initialize badge
            badge="No Badge"
            
            # Get individual counts
            commit_count=${commits[$contributor]}
            issue_count=${issues[$contributor]:-0}
            pr_count=${prs[$contributor]:-0}
            review_count=${reviews[$contributor]:-0}

            # Assign badges based on commits
            if [ "$commit_count" -gt 10 ]; then
              badge="Top Contributor"
            elif [ "$commit_count" -gt 5 ]; then
              badge="Rising Star"
            elif [ "$commit_count" -gt 2 ]; then
              badge="Consistent Contributor"
            fi

            # Assign badges based on issues
            if [ "$issue_count" -gt 5 ]; then
              badge="Issue Master"
            elif [ "$issue_count" -gt 2 ]; then
              badge="Active Issue Creator"
            fi

            # Assign badges based on pull requests
            if [ "$pr_count" -gt 5 ]; then
              badge="PR Hero"
            elif [ "$pr_count" -gt 2 ]; then
              badge="Active PR Contributor"
            fi

            # Assign badges based on reviews
            if [ "$review_count" -gt 5 ]; then
              badge="Review Master"
            elif [ "$review_count" -gt 2 ]; then
              badge="Active Reviewer"
            fi

            # Write contributor data to leaderboard
            echo "| @$contributor | $commit_count | $pr_count | $issue_count | $review_count | $badge |" >> leaderboard.md
          done

          # Commit and push changes if there are updates
          git config --global user.name "GitHub Actions"
          git config --global user.email "action@github.com"
          git diff --exit-code leaderboard.md || (git add leaderboard.md && git commit -m "🔁 Weekly leaderboard update with badges" && git push)
