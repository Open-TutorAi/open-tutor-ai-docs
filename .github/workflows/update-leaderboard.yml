name: Weekly Contributor Leaderboard

on:
  schedule:
    - cron: '0 0 * * 1'  # Every Monday at midnight UTC
  workflow_dispatch:  # Allows manual triggering

jobs:
  update-leaderboard:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch contributor stats and update leaderboard
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get a list of contributors and their commits
          echo "Fetching contributor stats..."
          
          # Set date range for the past month instead of week to ensure we catch more activity
          since_date=$(date -d '30 days ago' --utc +%Y-%m-%dT%H:%M:%SZ)
          until_date=$(date --utc +%Y-%m-%dT%H:%M:%SZ)
          
          echo "Fetching data from $since_date to $until_date"
          
          # Initialize leaderboard markdown file
          echo "# Weekly Contributor Leaderboard" > leaderboard.md
          echo "" >> leaderboard.md
          echo "Last updated: $(date --utc)" >> leaderboard.md
          echo "Period: Last 30 days" >> leaderboard.md
          echo "" >> leaderboard.md
          echo "| Contributor | Commits | Issues | Pull Requests | Reviews | Badge |" >> leaderboard.md
          echo "|-------------|---------|---------|---------------|---------|-------|" >> leaderboard.md
          
          # Create a temporary file to store contributor data
          declare -A contributor_data

          # Fetch commits
          echo "Fetching commits..."
          contributors_commits=$(curl -s -L \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/commits?since=$since_date&until=$until_date&per_page=100")

          echo "Raw commits response:"
          echo "$contributors_commits" | jq '.'

          # Check if the response is valid JSON and not empty
          if jq -e . >/dev/null 2>&1 <<<"$contributors_commits"; then
            echo "Processing commits..."
            echo "$contributors_commits" | jq -r '.[] | select(.author != null) | .author.login' | sort | uniq -c | while read count login; do
              if [ ! -z "$login" ]; then
                contributor_data["$login,commits"]=$count
                echo "Found $count commits for $login"
              fi
            done
          else
            echo "No valid commits data received"
          fi

          # Fetch issues
          echo "Fetching issues..."
          contributors_issues=$(curl -s -L \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues?state=all&since=$since_date&until=$until_date&per_page=100")

          echo "Raw issues response:"
          echo "$contributors_issues" | jq '.'

          # Check if the response is valid JSON and not empty
          if jq -e . >/dev/null 2>&1 <<<"$contributors_issues"; then
            echo "Processing issues..."
            echo "$contributors_issues" | jq -r '.[] | select(.pull_request == null and .user != null) | .user.login' | sort | uniq -c | while read count login; do
              if [ ! -z "$login" ]; then
                contributor_data["$login,issues"]=$count
                echo "Found $count issues for $login"
              fi
            done
          else
            echo "No valid issues data received"
          fi

          # Fetch PRs
          echo "Fetching pull requests..."
          contributors_prs=$(curl -s -L \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?state=all&since=$since_date&until=$until_date&per_page=100")

          echo "Raw PRs response:"
          echo "$contributors_prs" | jq '.'

          # Check if the response is valid JSON and not empty
          if jq -e . >/dev/null 2>&1 <<<"$contributors_prs"; then
            echo "Processing pull requests..."
            echo "$contributors_prs" | jq -r '.[] | select(.user != null) | .user.login' | sort | uniq -c | while read count login; do
              if [ ! -z "$login" ]; then
                contributor_data["$login,prs"]=$count
                echo "Found $count PRs for $login"
              fi
            done
          else
            echo "No valid pull requests data received"
          fi

          # Function to determine badge
          get_badge() {
            local commits=$1
            local issues=$2
            local prs=$3
            
            if [ "$commits" -gt 10 ]; then
              echo "🏆 Top Contributor"
            elif [ "$commits" -gt 5 ]; then
              echo "⭐ Rising Star"
            elif [ "$commits" -gt 2 ]; then
              echo "💪 Consistent Contributor"
            elif [ "$issues" -gt 5 ]; then
              echo "🎯 Issue Master"
            elif [ "$issues" -gt 2 ]; then
              echo "📝 Active Issue Creator"
            elif [ "$prs" -gt 5 ]; then
              echo "🚀 PR Master"
            elif [ "$prs" -gt 2 ]; then
              echo "🔄 Active PR Contributor"
            else
              echo "🌱 New Contributor"
            fi
          }

          # Process all contributors
          echo "Processing contributors..."
          processed_contributors=()
          for key in "${!contributor_data[@]}"; do
            login=${key%,*}
            type=${key#*,}
            
            # Skip if we've already processed this contributor
            if [[ " ${processed_contributors[@]} " =~ " ${login} " ]]; then
              continue
            fi
            
            commits=${contributor_data["$login,commits"]:-0}
            issues=${contributor_data["$login,issues"]:-0}
            prs=${contributor_data["$login,prs"]:-0}
            reviews=0  # placeholder for future implementation
            
            badge=$(get_badge "$commits" "$issues" "$prs")
            
            echo "Adding contributor $login with $commits commits, $issues issues, $prs PRs"
            echo "| @$login | $commits | $issues | $prs | $reviews | $badge |" >> leaderboard.md
            
            processed_contributors+=("$login")
          done

          # If no contributors were found, add a note
          if [ ${#processed_contributors[@]} -eq 0 ]; then
            echo "No contributors found for this period"
            echo "| No activity found in the last 30 days | - | - | - | - | - |" >> leaderboard.md
          fi

          # Sort the leaderboard by total contributions (excluding header)
          echo "Sorting leaderboard..."
          (head -n 7 leaderboard.md && tail -n +8 leaderboard.md | sort -t'|' -k2 -nr) > leaderboard.tmp
          mv leaderboard.tmp leaderboard.md

          # Add footer
          echo "" >> leaderboard.md
          echo "## Badge Levels" >> leaderboard.md
          echo "" >> leaderboard.md
          echo "- 🏆 **Top Contributor**: More than 10 commits" >> leaderboard.md
          echo "- ⭐ **Rising Star**: More than 5 commits" >> leaderboard.md
          echo "- 💪 **Consistent Contributor**: More than 2 commits" >> leaderboard.md
          echo "- 🎯 **Issue Master**: More than 5 issues" >> leaderboard.md
          echo "- 📝 **Active Issue Creator**: More than 2 issues" >> leaderboard.md
          echo "- 🚀 **PR Master**: More than 5 PRs" >> leaderboard.md
          echo "- 🔄 **Active PR Contributor**: More than 2 PRs" >> leaderboard.md
          echo "- 🌱 **New Contributor**: First contribution" >> leaderboard.md

          # Commit and push changes if there are updates
          git config --global user.name "GitHub Actions"
          git config --global user.email "action@github.com"
          git diff --exit-code leaderboard.md || (git add leaderboard.md && git commit -m "🔁 Monthly leaderboard update with badges" && git push)