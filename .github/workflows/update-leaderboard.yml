name: Weekly Contributor Leaderboard

on:
  schedule:
    - cron: '0 0 * * 1'  # Every Monday at midnight UTC
  workflow_dispatch:  # Allows manual triggering

jobs:
  update-leaderboard:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch contributor stats and update leaderboard
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Fetching contributor stats..."
          
          # Set date range for the past week
          since_date=$(date -d 'last Monday' --utc +%Y-%m-%dT%H:%M:%SZ)
          until_date=$(date --utc +%Y-%m-%dT%H:%M:%SZ)
          
          # Initialize leaderboard markdown file
          echo "# Weekly Contributor Leaderboard" > leaderboard.md
          echo "" >> leaderboard.md
          echo "Last updated: $(date --utc)" >> leaderboard.md
          echo "Period: Past week" >> leaderboard.md
          echo "" >> leaderboard.md
          echo "| Contributor | Commits | Issues | Pull Requests | Discussions | Reviews | Badge |" >> leaderboard.md
          echo "|-------------|---------|---------|---------------|-------------|---------|-------|" >> leaderboard.md
          
          # Function to fetch all pages
          fetch_all_pages() {
            local url=$1
            local result="[]"
            local page=1
            
            while true; do
              local response=$(curl -s \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                "${url}&page=${page}&per_page=100")
              
              # Break if empty or invalid response
              if [ -z "$response" ] || [ "$response" = "[]" ]; then
                break
              fi
              
              result=$(echo "$result $response" | jq -s 'add')
              
              # Break if less than 100 items (last page)
              if [ $(echo "$response" | jq '. | length') -lt 100 ]; then
                break
              fi
              
              ((page++))
            done
            
            echo "$result"
          }

          # Function to get user avatar URL
          get_avatar_url() {
            local username=$1
            local user_data=$(curl -s \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/users/$username")
            
            echo $(echo "$user_data" | jq -r '.avatar_url')
          }

          # Fetch all data
          contributors_commits=$(fetch_all_pages "https://api.github.com/repos/${{ github.repository }}/commits?since=$since_date&until=$until_date")
          contributors_issues=$(fetch_all_pages "https://api.github.com/repos/${{ github.repository }}/issues?state=all&since=$since_date")
          contributors_prs=$(fetch_all_pages "https://api.github.com/repos/${{ github.repository }}/pulls?state=all&since=$since_date")
          contributors_discussions=$(fetch_all_pages "https://api.github.com/repos/${{ github.repository }}/discussions?since=$since_date")

          declare -A contributor_stats
          declare -A contributor_avatars

          # Process commits
          echo "$contributors_commits" | jq -r '.[] | select(.author != null and .author.login != "github-actions[bot]" and .author.login != "actions-user") | "\(.author.login) | 1"' | \
            awk -F '|' '{ a[$1]+=$2 } END { for (i in a) print i, a[i] }' | \
            while read contributor commits; do
              contributor_stats["$contributor,commits"]=$commits
              if [ -z "${contributor_avatars[$contributor]}" ]; then
                contributor_avatars["$contributor"]=$(get_avatar_url "$contributor")
              fi
            done

          # Process issues
          echo "$contributors_issues" | jq -r '.[] | select(.pull_request == null and .user != null and .user.login != "github-actions[bot]" and .user.login != "actions-user") | "\(.user.login) | 1"' | \
            awk -F '|' '{ a[$1]+=$2 } END { for (i in a) print i, a[i] }' | \
            while read contributor issues; do
              contributor_stats["$contributor,issues"]=$issues
              if [ -z "${contributor_avatars[$contributor]}" ]; then
                contributor_avatars["$contributor"]=$(get_avatar_url "$contributor")
              fi
            done

          # Process pull requests
          echo "$contributors_prs" | jq -r '.[] | select(.user != null and .user.login != "github-actions[bot]" and .user.login != "actions-user") | "\(.user.login) | 1"' | \
            awk -F '|' '{ a[$1]+=$2 } END { for (i in a) print i, a[i] }' | \
            while read contributor prs; do
              contributor_stats["$contributor,prs"]=$prs
              if [ -z "${contributor_avatars[$contributor]}" ]; then
                contributor_avatars["$contributor"]=$(get_avatar_url "$contributor")
              fi
            done

          # Process discussions
          echo "$contributors_discussions" | jq -r '.[] | select(.author != null and .author.login != "github-actions[bot]" and .author.login != "actions-user") | "\(.author.login) | 1"' | \
            awk -F '|' '{ a[$1]+=$2 } END { for (i in a) print i, a[i] }' | \
            while read contributor discussions; do
              contributor_stats["$contributor,discussions"]=$discussions
              if [ -z "${contributor_avatars[$contributor]}" ]; then
                contributor_avatars["$contributor"]=$(get_avatar_url "$contributor")
              fi
            done

          # Function to get badge
          get_badge() {
            local commits=$1
            local issues=$2
            local prs=$3
            local discussions=$4
            local total=$((commits + issues + prs + discussions))
            
            if [ "$commits" -gt 10 ]; then
              echo "üèÜ Top Contributor"
            elif [ "$total" -gt 10 ]; then
              echo "‚≠ê Rising Star"
            elif [ "$commits" -gt 5 ]; then
              echo "üí™ Consistent Contributor"
            elif [ "$issues" -gt 5 ]; then
              echo "üéØ Issue Master"
            elif [ "$prs" -gt 5 ]; then
              echo "üöÄ PR Master"
            elif [ "$discussions" -gt 5 ]; then
              echo "üí¨ Discussion Leader"
            elif [ "$total" -gt 5 ]; then
              echo "üîÑ Active Contributor"
            else
              echo "üå± New Contributor"
            fi
          }

          # Write the leaderboard entries
          for contributor in "${!contributor_avatars[@]}"; do
            commits=${contributor_stats["$contributor,commits"]:-0}
            issues=${contributor_stats["$contributor,issues"]:-0}
            prs=${contributor_stats["$contributor,prs"]:-0}
            discussions=${contributor_stats["$contributor,discussions"]:-0}
            avatar_url=${contributor_avatars["$contributor"]}
            badge=$(get_badge "$commits" "$issues" "$prs" "$discussions")
            
            echo "| <img src=\"$avatar_url\" width=\"30\" style=\"border-radius: 50%\"> [@$contributor](https://github.com/$contributor) | $commits | $issues | $prs | $discussions | 0 | $badge |" >> leaderboard.md
          done

          # Sort the leaderboard by total contributions (excluding header)
          (head -n 7 leaderboard.md && tail -n +8 leaderboard.md | sort -t'|' -k2 -nr) > leaderboard.tmp
          mv leaderboard.tmp leaderboard.md

          # Add badge explanation
          echo "" >> leaderboard.md
          echo "## Badge Levels" >> leaderboard.md
          echo "" >> leaderboard.md
          echo "- üèÜ **Top Contributor**: More than 10 commits" >> leaderboard.md
          echo "- ‚≠ê **Rising Star**: More than 10 total contributions" >> leaderboard.md
          echo "- üí™ **Consistent Contributor**: More than 5 commits" >> leaderboard.md
          echo "- üéØ **Issue Master**: More than 5 issues" >> leaderboard.md
          echo "- üöÄ **PR Master**: More than 5 PRs" >> leaderboard.md
          echo "- üí¨ **Discussion Leader**: More than 5 discussions" >> leaderboard.md
          echo "- üîÑ **Active Contributor**: More than 5 total contributions" >> leaderboard.md
          echo "- üå± **New Contributor**: First contribution" >> leaderboard.md

          # Commit and push changes if there are updates
          git config --global user.name "GitHub Actions"
          git config --global user.email "action@github.com"
          git diff --exit-code leaderboard.md || (git add leaderboard.md && git commit -m "üîÅ Weekly leaderboard update with badges" && git push)
