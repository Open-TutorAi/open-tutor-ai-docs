name: Weekly Contributor Leaderboard

on:
  schedule:
    - cron: '0 0 * * 1'  # Every Monday at midnight UTC
  workflow_dispatch:  # Allows manual triggering

jobs:
  update-leaderboard:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch contributor stats and update leaderboard
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x  # Enable debug mode
          
          echo "Fetching contributor stats..."
          
          # Set date range for the past week
          since_date=$(date -d 'last Monday' --utc +%Y-%m-%dT%H:%M:%SZ)
          until_date=$(date --utc +%Y-%m-%dT%H:%M:%SZ)
          
          echo "Fetching data from $since_date to $until_date"
          
          # Initialize leaderboard markdown file
          echo "# Weekly Contributor Leaderboard" > leaderboard.md
          echo "" >> leaderboard.md
          echo "Last updated: $(date --utc)" >> leaderboard.md
          echo "Period: Past week" >> leaderboard.md
          echo "" >> leaderboard.md
          echo "| Contributor | Commits | Issues | Pull Requests | Reviews | Badge |" >> leaderboard.md
          echo "|-------------|---------|---------|---------------|---------|-------|" >> leaderboard.md
          
          # Create temporary directory for storing data
          mkdir -p /tmp/leaderboard
          
          # Function to fetch all pages of data
          fetch_all_pages() {
            local url=$1
            local output_file=$2
            local page=1
            local all_data="[]"
            
            while true; do
              echo "Fetching page $page from $url"
              
              response=$(curl -s -L \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                "${url}&page=${page}&per_page=100")
              
              # Check if response is empty or invalid
              if [ -z "$response" ] || [ "$response" = "[]" ] || ! jq -e . >/dev/null 2>&1 <<<"$response"; then
                break
              fi
              
              # Merge response with existing data
              all_data=$(echo "$all_data" "$response" | jq -s 'add')
              
              # Check if we got less than 100 items
              items_count=$(echo "$response" | jq '. | length')
              if [ "$items_count" -lt 100 ]; then
                break
              fi
              
              ((page++))
            done
            
            echo "$all_data" > "$output_file"
          }

          # Fetch all data types
          echo "Fetching commits..."
          fetch_all_pages "https://api.github.com/repos/${{ github.repository }}/commits?since=${since_date}&until=${until_date}" "/tmp/leaderboard/commits.json"

          echo "Fetching issues..."
          fetch_all_pages "https://api.github.com/repos/${{ github.repository }}/issues?state=all&since=${since_date}" "/tmp/leaderboard/issues.json"

          echo "Fetching pull requests..."
          fetch_all_pages "https://api.github.com/repos/${{ github.repository }}/pulls?state=all&sort=updated&direction=desc" "/tmp/leaderboard/prs.json"

          # Process data and create contributor stats
          declare -A contributor_data

          # Process commits
          if [ -f "/tmp/leaderboard/commits.json" ]; then
            jq -r --arg since "$since_date" --arg until "$until_date" \
              '.[] | select(.author != null and .commit.author.date >= $since and .commit.author.date <= $until) | .author.login' \
              "/tmp/leaderboard/commits.json" | sort | uniq -c | while read count login; do
              if [ ! -z "$login" ]; then
                contributor_data["$login,commits"]=$count
              fi
            done
          fi

          # Process issues
          if [ -f "/tmp/leaderboard/issues.json" ]; then
            jq -r --arg since "$since_date" \
              '.[] | select(.pull_request == null and .user != null and .created_at >= $since) | .user.login' \
              "/tmp/leaderboard/issues.json" | sort | uniq -c | while read count login; do
              if [ ! -z "$login" ]; then
                contributor_data["$login,issues"]=$count
              fi
            done
          fi

          # Process PRs
          if [ -f "/tmp/leaderboard/prs.json" ]; then
            jq -r --arg since "$since_date" \
              '.[] | select(.user != null and .created_at >= $since) | .user.login' \
              "/tmp/leaderboard/prs.json" | sort | uniq -c | while read count login; do
              if [ ! -z "$login" ]; then
                contributor_data["$login,prs"]=$count
              fi
            done
          fi

          # Function to determine badge
          get_badge() {
            local commits=$1
            local issues=$2
            local prs=$3
            local total=$((commits + issues + prs))
            
            if [ "$commits" -gt 10 ]; then
              echo "🏆 Top Contributor"
            elif [ "$total" -gt 10 ]; then
              echo "⭐ Rising Star"
            elif [ "$commits" -gt 5 ]; then
              echo "💪 Consistent Contributor"
            elif [ "$issues" -gt 5 ]; then
              echo "🎯 Issue Master"
            elif [ "$prs" -gt 5 ]; then
              echo "🚀 PR Master"
            elif [ "$total" -gt 5 ]; then
              echo "🔄 Active Contributor"
            else
              echo "🌱 New Contributor"
            fi
          }

          # Process all contributors
          processed_contributors=()
          
          for key in "${!contributor_data[@]}"; do
            login=${key%,*}
            type=${key#*,}
            
            # Skip if already processed
            if [[ " ${processed_contributors[@]} " =~ " ${login} " ]]; then
              continue
            fi
            
            commits=${contributor_data["$login,commits"]:-0}
            issues=${contributor_data["$login,issues"]:-0}
            prs=${contributor_data["$login,prs"]:-0}
            reviews=0  # placeholder for future implementation
            
            badge=$(get_badge "$commits" "$issues" "$prs")
            
            echo "| @$login | $commits | $issues | $prs | $reviews | $badge |" >> leaderboard.md
            
            processed_contributors+=("$login")
          done

          # If no contributors were found
          if [ ${#processed_contributors[@]} -eq 0 ]; then
            echo "| No activity found this week | - | - | - | - | - |" >> leaderboard.md
          fi

          # Sort the leaderboard by total contributions
          (head -n 7 leaderboard.md && tail -n +8 leaderboard.md | sort -t'|' -k2 -nr) > leaderboard.tmp
          mv leaderboard.tmp leaderboard.md

          # Add badge explanation
          echo "" >> leaderboard.md
          echo "## Badge Levels" >> leaderboard.md
          echo "" >> leaderboard.md
          echo "- 🏆 **Top Contributor**: More than 10 commits" >> leaderboard.md
          echo "- ⭐ **Rising Star**: More than 10 total contributions" >> leaderboard.md
          echo "- 💪 **Consistent Contributor**: More than 5 commits" >> leaderboard.md
          echo "- 🎯 **Issue Master**: More than 5 issues" >> leaderboard.md
          echo "- 🚀 **PR Master**: More than 5 PRs" >> leaderboard.md
          echo "- 🔄 **Active Contributor**: More than 5 total contributions" >> leaderboard.md
          echo "- 🌱 **New Contributor**: First contribution" >> leaderboard.md

          # Clean up
          rm -rf /tmp/leaderboard

          # Commit and push changes if there are updates
          git config --global user.name "GitHub Actions"
          git config --global user.email "action@github.com"
          git diff --exit-code leaderboard.md || (git add leaderboard.md && git commit -m "🔁 Weekly leaderboard update" && git push)
